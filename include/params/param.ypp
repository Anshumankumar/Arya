%skeleton "lalr1.cc"
%debug
%defines


%{
#include <string>
#include <iostream>
#include <string.h>
%}
%union {
     int                    integerVal;
     std::string *          var;
     double                 doubleVal;
     std::string *          stringVal;
     std::string *          errorVal;
}

%token <integerVal> INTEGER
%token <stringVal> STRING
%token <errorVal> ERROR
%token ENDLINE
%token TAB
%token <var> VARIABLE
%token COLON
%token <doubleVal> DOUBLE



%locations

%{

#include <FlexLexer.h>
#include <iostream>
#include <fstream>
#include <params/paramConstructor.hpp>
#include <params/params.hpp>


int  yylex(yy::parser::semantic_type *arg,  yy::parser::location_type * yylloc);
yy::parser::semantic_type* yylval;
yy::location *loc;
static int tabcount=0;
static int errorEncountered;
static FlexLexer *flexLexer = new yyFlexLexer();
static ParamConstructor pc;
%}
%%



params: e param  
      |  param
      |  params endline param {if (errorEncountered < 0) yy::parser::error(*loc,"Invalid Tabs");} 
      ;

e: ERROR  {yy::parser::error(*loc,"Unexpected charater" + *$1);}
  | e ERROR{yy::parser::error(*loc,"Unexpected charater" + *$2);}

param: 
    | tabs VARIABLE COLON STRING {errorEncountered = pc.add<std::string>(*$2,*$4,tabcount);  } 
    | tabs VARIABLE COLON DOUBLE {errorEncountered = pc.add<double>(*$2,$4,tabcount);  } 
    | tabs VARIABLE COLON INTEGER { errorEncountered = pc.add<int>(*$2,$4,tabcount); } 
    | tabs VARIABLE COLON { Params p; errorEncountered = pc.add<Params>(*$2,p,tabcount);   } 


tabs: 
     | tabs TAB {tabcount++;} ;

endline:ENDLINE {tabcount=0;};

%%


int  yylex(yy::parser::semantic_type *arg,  yy::parser::location_type * yylloc) {
    yylval = arg;
    loc = yylloc;
    return flexLexer->yylex();
}


void yy::parser::error (const location_type& loc, const std::string& msg)
{
    std::cerr << "ERROR: "<< loc <<" " << msg << "\n";
}

Params parseParam(std::string file)
{
  std::filebuf fb;
  if (fb.open (file,std::ios::in))
  {
    pc.reset();
    std::istream is(&fb);
    flexLexer->switch_streams(is,std::cout);
    yy::parser* p=new yy::parser();
    p->parse();
    fb.close();
    return *pc.get();
  }
  std::cerr << "File not found " << file<< std::endl;
  fb.close();
  exit(2);
}  
