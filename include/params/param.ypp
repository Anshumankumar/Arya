%skeleton "lalr1.cc"
%debug
%defines


%{
#include <string>
#include <iostream>
#include <string.h>
%}
%union {
     int                    integerVal;
     std::string *          var;
     double                 doubleVal;
     std::string *          stringVal;
}

%token <integerVal> INTEGER
%token <stringVal> STRING
%token ENDLINE
%token TAB
%token <var> VARIABLE
%token COLON
%token <doubleVal> DOUBLE



%locations

%{

#include <FlexLexer.h>
#include <iostream>
#include "paramConstructor.hpp"
extern ParamConstructor pc;


int  yylex(yy::parser::semantic_type *arg,  yy::parser::location_type * yylloc);
yy::parser::semantic_type* yylval;
static int tabcount=0;
%}
%%
params:param {printf("Got a param");}
      |  params endline param {printf("PARA\n");} 
      ;

param: 
    | tabs VARIABLE COLON STRING {printf("%d param  \n", tabcount ); std::cout << *$2; } 
    | tabs VARIABLE COLON DOUBLE {printf("%d param  \n", tabcount ); std::cout << *$2; } 
    | tabs VARIABLE COLON INTEGER {printf("%d param \n", tabcount); pc.add<int>(*$2,$4,tabcount); } 
    | tabs VARIABLE COLON {printf("%d param  \n", tabcount );Params p; pc.add<Params>(*$2,p,tabcount);   } 


tabs: 
     | tabs TAB {tabcount++; std::cout << tabcount <<"\n"; } ;

endline:ENDLINE {tabcount=0;};

%%


int  yylex(yy::parser::semantic_type *arg,  yy::parser::location_type * yylloc) {
    yylval = arg;
    static FlexLexer *flexLexer = new yyFlexLexer();
    return flexLexer->yylex();
}


void yy::parser::error (const location_type& loc, const std::string& msg)
{
    std::cerr << "ERROR: "<< loc <<" " << msg << "\n";
    exit(2); 
} 
